// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ReadActivitiesApiV1ActivitiesGetData, ReadActivitiesApiV1ActivitiesGetResponse, CreateActivityApiV1ActivitiesPostData, CreateActivityApiV1ActivitiesPostResponse, ReadActivityApiV1ActivitiesIdGetData, ReadActivityApiV1ActivitiesIdGetResponse, UpdateActivityApiV1ActivitiesIdPutData, UpdateActivityApiV1ActivitiesIdPutResponse, DeleteActivityApiV1ActivitiesIdDeleteData, DeleteActivityApiV1ActivitiesIdDeleteResponse, AddExerciseToActivityApiV1ActivitiesIdExercisesExerciseIdPostData, AddExerciseToActivityApiV1ActivitiesIdExercisesExerciseIdPostResponse, RemoveExerciseFromActivityApiV1ActivitiesIdExercisesExerciseIdDeleteData, RemoveExerciseFromActivityApiV1ActivitiesIdExercisesExerciseIdDeleteResponse, AssignActivityToUserApiV1ActivitiesAssignActivityIdPostData, AssignActivityToUserApiV1ActivitiesAssignActivityIdPostResponse, UpdateActivityAssignmentApiV1ActivitiesAssignActivityIdPutData, UpdateActivityAssignmentApiV1ActivitiesAssignActivityIdPutResponse, UnassignActivityFromUserApiV1ActivitiesUnassignActivityIdDeleteData, UnassignActivityFromUserApiV1ActivitiesUnassignActivityIdDeleteResponse, GetExercisesForDayApiV1ActivitiesExercisesUserIdDateGetData, GetExercisesForDayApiV1ActivitiesExercisesUserIdDateGetResponse, CreateUserApiV1AdminUsersPostData, CreateUserApiV1AdminUsersPostResponse, LoginApiV1GetResponse, LoginAccessTokenApiV1LoginAccessTokenPostData, LoginAccessTokenApiV1LoginAccessTokenPostResponse, TestTokenApiV1LoginTestTokenPostResponse, RecoverPasswordApiV1PasswordRecoveryEmailPostData, RecoverPasswordApiV1PasswordRecoveryEmailPostResponse, ResetPasswordApiV1ResetPasswordPostData, ResetPasswordApiV1ResetPasswordPostResponse, RecoverPasswordHtmlContentApiV1PasswordRecoveryHtmlContentEmailPostData, RecoverPasswordHtmlContentApiV1PasswordRecoveryHtmlContentEmailPostResponse, ReadExercisesApiV1ExercisesGetData, ReadExercisesApiV1ExercisesGetResponse, CreateExerciseApiV1ExercisesPostData, CreateExerciseApiV1ExercisesPostResponse, ReadExerciseApiV1ExercisesIdGetData, ReadExerciseApiV1ExercisesIdGetResponse, UpdateExerciseApiV1ExercisesIdPutData, UpdateExerciseApiV1ExercisesIdPutResponse, DeleteExerciseApiV1ExercisesIdDeleteData, DeleteExerciseApiV1ExercisesIdDeleteResponse, ReadItemsApiV1ItemsGetData, ReadItemsApiV1ItemsGetResponse, CreateItemApiV1ItemsPostData, CreateItemApiV1ItemsPostResponse, ReadItemApiV1ItemsIdGetData, ReadItemApiV1ItemsIdGetResponse, UpdateItemApiV1ItemsIdPutData, UpdateItemApiV1ItemsIdPutResponse, DeleteItemApiV1ItemsIdDeleteData, DeleteItemApiV1ItemsIdDeleteResponse, ReadUsersApiV1UsersGetData, ReadUsersApiV1UsersGetResponse, CreateUserApiV1UsersPostData, CreateUserApiV1UsersPostResponse, ReadUserMeApiV1UsersMeGetResponse, DeleteUserMeApiV1UsersMeDeleteResponse, UpdateUserMeApiV1UsersMePatchData, UpdateUserMeApiV1UsersMePatchResponse, UpdatePasswordMeApiV1UsersMePasswordPatchData, UpdatePasswordMeApiV1UsersMePasswordPatchResponse, ReadUserByIdApiV1UsersUserIdGetData, ReadUserByIdApiV1UsersUserIdGetResponse, UpdateUserApiV1UsersUserIdPatchData, UpdateUserApiV1UsersUserIdPatchResponse, DeleteUserApiV1UsersUserIdDeleteData, DeleteUserApiV1UsersUserIdDeleteResponse, UpdateExercisePerformanceApiV1UsersMeExercisePerformancePatchData, UpdateExercisePerformanceApiV1UsersMeExercisePerformancePatchResponse } from './types.gen';

export class ActivitiesService {
    /**
     * Read Activities
     * Retrieve activities.
     * If user_id is provided, get activities for that specific user.
     * Otherwise, get activities based on current user permissions.
     * @param data The data for the request.
     * @param data.userId
     * @param data.skip
     * @param data.limit
     * @returns ActivitiesPublic Successful Response
     * @throws ApiError
     */
    public static readActivitiesApiV1(data: ReadActivitiesApiV1ActivitiesGetData = {}): CancelablePromise<ReadActivitiesApiV1ActivitiesGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/activities/',
            query: {
                user_id: data.userId,
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Activity
     * Create new activity.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ActivityPublic Successful Response
     * @throws ApiError
     */
    public static createActivityApiV1(data: CreateActivityApiV1ActivitiesPostData): CancelablePromise<CreateActivityApiV1ActivitiesPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/activities/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Activity
     * Get activity by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ActivityPublic Successful Response
     * @throws ApiError
     */
    public static readActivityApiV1(data: ReadActivityApiV1ActivitiesIdGetData): CancelablePromise<ReadActivityApiV1ActivitiesIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/activities/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Activity
     * Update an activity.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ActivityPublic Successful Response
     * @throws ApiError
     */
    public static updateActivityApiV1(data: UpdateActivityApiV1ActivitiesIdPutData): CancelablePromise<UpdateActivityApiV1ActivitiesIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/activities/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Activity
     * Delete an activity.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteActivityApiV1(data: DeleteActivityApiV1ActivitiesIdDeleteData): CancelablePromise<DeleteActivityApiV1ActivitiesIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/activities/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Add Exercise To Activity
     * Add an exercise to an activity.
     * @param data The data for the request.
     * @param data.id
     * @param data.exerciseId
     * @returns ActivityPublic Successful Response
     * @throws ApiError
     */
    public static addExerciseToActivityApiV1(data: AddExerciseToActivityApiV1ActivitiesIdExercisesExerciseIdPostData): CancelablePromise<AddExerciseToActivityApiV1ActivitiesIdExercisesExerciseIdPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/activities/{id}/exercises/{exercise_id}',
            path: {
                id: data.id,
                exercise_id: data.exerciseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Remove Exercise From Activity
     * Remove an exercise from an activity.
     * @param data The data for the request.
     * @param data.id
     * @param data.exerciseId
     * @returns ActivityPublic Successful Response
     * @throws ApiError
     */
    public static removeExerciseFromActivityApiV1(data: RemoveExerciseFromActivityApiV1ActivitiesIdExercisesExerciseIdDeleteData): CancelablePromise<RemoveExerciseFromActivityApiV1ActivitiesIdExercisesExerciseIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/activities/{id}/exercises/{exercise_id}',
            path: {
                id: data.id,
                exercise_id: data.exerciseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Assign Activity To User
     * Assign an activity to the user's activities array with a specific date.
     * Also updates user's exercises performance map.
     * @param data The data for the request.
     * @param data.activityId
     * @param data.date
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static assignActivityToUserApiV1(data: AssignActivityToUserApiV1ActivitiesAssignActivityIdPostData): CancelablePromise<AssignActivityToUserApiV1ActivitiesAssignActivityIdPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/activities/assign/{activity_id}',
            path: {
                activity_id: data.activityId
            },
            query: {
                date: data.date
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Activity Assignment
     * Update an activity assignment date in the user's activities array.
     * Also moves performance data from old_date to new_date for all exercises in the activity.
     * @param data The data for the request.
     * @param data.activityId
     * @param data.oldDate
     * @param data.newDate
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updateActivityAssignmentApiV1(data: UpdateActivityAssignmentApiV1ActivitiesAssignActivityIdPutData): CancelablePromise<UpdateActivityAssignmentApiV1ActivitiesAssignActivityIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/activities/assign/{activity_id}',
            path: {
                activity_id: data.activityId
            },
            query: {
                old_date: data.oldDate,
                new_date: data.newDate
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Unassign Activity From User
     * Remove an activity assignment from the user's activities array for a specific date.
     * Also removes performance data for that date from all exercises in the activity.
     * @param data The data for the request.
     * @param data.activityId
     * @param data.date
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static unassignActivityFromUserApiV1(data: UnassignActivityFromUserApiV1ActivitiesUnassignActivityIdDeleteData): CancelablePromise<UnassignActivityFromUserApiV1ActivitiesUnassignActivityIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/activities/unassign/{activity_id}',
            path: {
                activity_id: data.activityId
            },
            query: {
                date: data.date
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Exercises For Day
     * Retrieve exercises for a specific user on a specific date.
     * Logic:
     * 1. Get the user's activities array
     * 2. Find activity assigned to the given date
     * 3. Fetch the activity details to get exercises
     * 4. Return the exercises list
     * @param data The data for the request.
     * @param data.userId
     * @param data.date
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getExercisesForDayApiV1(data: GetExercisesForDayApiV1ActivitiesExercisesUserIdDateGetData): CancelablePromise<GetExercisesForDayApiV1ActivitiesExercisesUserIdDateGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/activities/exercises/{user_id}/{date}',
            path: {
                user_id: data.userId,
                date: data.date
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class AdminService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUserApiV1(data: CreateUserApiV1AdminUsersPostData): CancelablePromise<CreateUserApiV1AdminUsersPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/admin/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class AuthService {
    /**
     * Login
     * Placeholder for login endpoint.
     * This can be used to redirect to a frontend login page or similar.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static loginApiV1(): CancelablePromise<LoginApiV1GetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/'
        });
    }
    
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessTokenApiV1(data: LoginAccessTokenApiV1LoginAccessTokenPostData): CancelablePromise<LoginAccessTokenApiV1LoginAccessTokenPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testTokenApiV1(): CancelablePromise<TestTokenApiV1LoginTestTokenPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPasswordApiV1(data: RecoverPasswordApiV1PasswordRecoveryEmailPostData): CancelablePromise<RecoverPasswordApiV1PasswordRecoveryEmailPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPasswordApiV1(data: ResetPasswordApiV1ResetPasswordPostData): CancelablePromise<ResetPasswordApiV1ResetPasswordPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContentApiV1(data: RecoverPasswordHtmlContentApiV1PasswordRecoveryHtmlContentEmailPostData): CancelablePromise<RecoverPasswordHtmlContentApiV1PasswordRecoveryHtmlContentEmailPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ExercisesService {
    /**
     * Read Exercises
     * Retrieve active exercises only.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ExercisesPublic Successful Response
     * @throws ApiError
     */
    public static readExercisesApiV1(data: ReadExercisesApiV1ExercisesGetData = {}): CancelablePromise<ReadExercisesApiV1ExercisesGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/exercises/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Exercise
     * Create new exercise.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ExercisePublic Successful Response
     * @throws ApiError
     */
    public static createExerciseApiV1(data: CreateExerciseApiV1ExercisesPostData): CancelablePromise<CreateExerciseApiV1ExercisesPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/exercises/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Exercise
     * Get exercise by ID (only if active).
     * @param data The data for the request.
     * @param data.id
     * @returns ExercisePublic Successful Response
     * @throws ApiError
     */
    public static readExerciseApiV1(data: ReadExerciseApiV1ExercisesIdGetData): CancelablePromise<ReadExerciseApiV1ExercisesIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/exercises/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Exercise
     * Update an exercise.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ExercisePublic Successful Response
     * @throws ApiError
     */
    public static updateExerciseApiV1(data: UpdateExerciseApiV1ExercisesIdPutData): CancelablePromise<UpdateExerciseApiV1ExercisesIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/exercises/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Exercise
     * Soft delete an exercise by setting is_active to False.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteExerciseApiV1(data: DeleteExerciseApiV1ExercisesIdDeleteData): CancelablePromise<DeleteExerciseApiV1ExercisesIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/exercises/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItemsApiV1(data: ReadItemsApiV1ItemsGetData = {}): CancelablePromise<ReadItemsApiV1ItemsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItemApiV1(data: CreateItemApiV1ItemsPostData): CancelablePromise<CreateItemApiV1ItemsPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItemApiV1(data: ReadItemApiV1ItemsIdGetData): CancelablePromise<ReadItemApiV1ItemsIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItemApiV1(data: UpdateItemApiV1ItemsIdPutData): CancelablePromise<UpdateItemApiV1ItemsIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItemApiV1(data: DeleteItemApiV1ItemsIdDeleteData): CancelablePromise<DeleteItemApiV1ItemsIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login
     * Placeholder for login endpoint.
     * This can be used to redirect to a frontend login page or similar.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static loginApiV1(): CancelablePromise<LoginApiV1GetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/'
        });
    }
    
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessTokenApiV1(data: LoginAccessTokenApiV1LoginAccessTokenPostData): CancelablePromise<LoginAccessTokenApiV1LoginAccessTokenPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testTokenApiV1(): CancelablePromise<TestTokenApiV1LoginTestTokenPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPasswordApiV1(data: RecoverPasswordApiV1PasswordRecoveryEmailPostData): CancelablePromise<RecoverPasswordApiV1PasswordRecoveryEmailPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPasswordApiV1(data: ResetPasswordApiV1ResetPasswordPostData): CancelablePromise<ResetPasswordApiV1ResetPasswordPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContentApiV1(data: RecoverPasswordHtmlContentApiV1PasswordRecoveryHtmlContentEmailPostData): CancelablePromise<RecoverPasswordHtmlContentApiV1PasswordRecoveryHtmlContentEmailPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsersApiV1(data: ReadUsersApiV1UsersGetData = {}): CancelablePromise<ReadUsersApiV1UsersGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUserApiV1(data: CreateUserApiV1UsersPostData): CancelablePromise<CreateUserApiV1UsersPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMeApiV1(): CancelablePromise<ReadUserMeApiV1UsersMeGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMeApiV1(): CancelablePromise<DeleteUserMeApiV1UsersMeDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMeApiV1(data: UpdateUserMeApiV1UsersMePatchData): CancelablePromise<UpdateUserMeApiV1UsersMePatchResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMeApiV1(data: UpdatePasswordMeApiV1UsersMePasswordPatchData): CancelablePromise<UpdatePasswordMeApiV1UsersMePasswordPatchResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserByIdApiV1(data: ReadUserByIdApiV1UsersUserIdGetData): CancelablePromise<ReadUserByIdApiV1UsersUserIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserApiV1(data: UpdateUserApiV1UsersUserIdPatchData): CancelablePromise<UpdateUserApiV1UsersUserIdPatchResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserApiV1(data: DeleteUserApiV1UsersUserIdDeleteData): CancelablePromise<DeleteUserApiV1UsersUserIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Exercise Performance
     * Update exercise performance for the current user on a specific date.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updateExercisePerformanceApiV1(data: UpdateExercisePerformanceApiV1UsersMeExercisePerformancePatchData): CancelablePromise<UpdateExercisePerformanceApiV1UsersMeExercisePerformancePatchResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/exercise-performance',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}